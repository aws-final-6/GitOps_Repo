version: 0.2

phases:
  install:
    commands:
      - echo Setting up AWS environment variables
      - export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - export AWS_REGION=${AWS_REGION}
      - echo check aws-cli version
      - aws --version
      - pip install --upgrade awscli
      - echo install kubectl
      - curl -LO https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl
      - curl -LO https://dl.k8s.io/release/v1.30.0/bin/linux/amd64/kubectl.sha256
      - echo checking the sha256sum...
      - echo "$(cat kubectl.sha256)  kubectl" | sha256sum --check
      - echo Setting up kubeconfig...
      - chmod +x ./kubectl
      - mkdir -p /usr/local/bin
      - mv ./kubectl /usr/local/bin/kubectl
      - echo kubectl version
      - kubectl version --client

  pre_build:
    commands:
      - echo "Getting EKS Cluster..."
      - aws eks describe-cluster --region ${AWS_EKS_REGION} --name ${CLUSTER_NAME}
      - echo "Update Kubeconfig..."
      - aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_EKS_REGION}
      - echo "Contents of kubeconfig:"
      - cat ~/.kube/config
      - TOKEN=$(aws eks get-token --cluster-name ${CLUSTER_NAME} --region ${AWS_EKS_REGION} | jq -r '.status.token')
      - kubectl --token=$TOKEN get nodes --v=8
      - echo "Getting Kubernetes nodes..."
      - kubectl get nodes --v=8

  build:
    commands:
      - echo "Apply application object manifest"
      - kubectl apply -f 01-Namespace.yaml
      - kubectl apply -f 02-Configmap.yaml
      - kubectl apply -f 03-Secret.yaml
      - kubectl apply -f 03-StorageClass.yaml
      - kubectl apply -f 04-PV-PVC.yaml
      # - kubectl apply -f 05-SA.yaml
      # - kubectl apply -f 06-Role.yaml
      # - kubectl apply -f 07-RoleBinding.yaml
      - kubectl apply -f 08-Ingress.yaml
      - kubectl apply -f 09-Service.yaml
      # - kubectl apply -f 12-HPA.yaml
      # - kubectl apply -f 13-LimitRage.yaml
      # - kubectl apply -f 14-Netpol.yaml
      # - kubectl apply -f 15-ResourceQuota.yaml
      - echo "Apply application container manifest"
      - kubectl apply -f be_fap_deployment.yaml
      - kubectl apply -f be_nod_deployment.yaml
      - kubectl apply -f be_ocr_deployment.yaml
      - kubectl apply -f db_statefulset.yaml
      - kubectl apply -f fe_deployment.yaml

  post_build:
    commands:
      - echo check pod in all namespace
      - kubectl get po -A
      - echo check all in all namespace
      - kubectl get all -A
      - echo "Checking statefulset status for mlr-prd-db-sts..."
      - kubectl rollout status statefulset/mlr-prd-db-sts -n mlr-prd-db-ns
      - echo "Checking deployment status for mlr-prd-be-dpl-nod..."
      - kubectl rollout status deployment/mlr-prd-be-dpl-nod -n mlr-prd-be-ns
      - echo "Checking deployment status for mlr-prd-be-dpl-fap..."
      - kubectl rollout status deployment/mlr-prd-be-dpl-fap -n mlr-prd-be-ns
      - echo "Checking deployment status for mlr-prd-be-dpl-ocr..."
      - kubectl rollout status deployment/mlr-prd-be-dpl-ocr -n mlr-prd-be-ns
      - echo "Checking deployment status for mlr-prd-fe-dpl..."
      - kubectl rollout status deployment/mlr-prd-fe-dpl -n mlr-prd-fe-ns
      - if [ $? -eq 0 ]; then
          echo "All deployments and statefulsets completed successfully, ending build.";
        else
          echo "Deployment or statefulset failed, exiting.";
          exit 1;
        fi
artifacts:
  files:
    - '**/*'
  discard-paths: yes
